A1:
----------------------------------------------------------------------
// the node in the parse tree.
template <typename Left, typename Op, typename Right, typename T>
struct X
{
	Left
		m_left;
	Right
		m_right;
	X( Left t1, Right t2) : m_left(t1), m_right(t2)
	{ }
	T operator[](int i)
	{
		return Op::apply( m_left[i], m_right[i] );
	}
};
template <typename T>
struct Array
{
	T *m_data;
	int m_N;
	// constructor
	Array( T *data, int N) : m_data(data), m_N(N) { }
	~Array()
	{
		...
			cout << "Destructor called" << endl;
	}
	// assign an expression to the array
	template <typename Left, typename Op, typename Right>
		void operator=( X<Left,Op,Right, T> expr)
		{
			for ( int i = 0; i < m_N; ++i)
				m_data[i] = expr[i];
		}
	T operator[](int i)
	{
		return m_data[i];
	}
	void print() const {
		int l = 0; cout << ’[’;
		if (m_N > 0) cout << m_data[l++];
		while(l < m_N) cout << ’,’ << m_data[l++];
		cout << ’]’ << endl;
	}
};


template <typename Left, typename T>
X<Left, Plus<T>, Array<T>, T> operator+( Left a, Array<T> b)
{
	return X<Left, Plus<T>, Array<T>, T>(a,b);
}




int main()
{
	double a_data[] = { 2, 3, 5, 9 };
	double b_data[] = { 1, 0, 0, 1 };
	double c_data[] = { 3, 0, 2, 5 };
	double d_data[4];

	Array<double> A(a_data,4);
	Array<double> B(b_data,4);
	Array<double> C(c_data,4);
	Array<double> D(d_data,4);

	D = A + B + C;
	D.print();

	D = A - B - C;
	D.print();
}


A2:
----------------------------------------------------------------------
int main()
{
	double a_data[] = { 2, 3, 5, 9 };
	double b_data[] = { 1, 0, 0, 1 };
	double c_data[] = { 3, 0, 2, 5 };
	double d_data[4];

	Array<double> A(a_data,4);
	Array<double> B(b_data,4);
	Array<double> C(c_data,4);
	Array<double> D(d_data,4);

	D = k*A + B + l*C;
	D.print();
}



A3:
----------------------------------------------------------------------

int main()
{
	double a_data[] = { 2, 3, 5, 9 };
	double b_data[] = { 1, 0, 0, 1 };

	Array<double> A(a_data,4);
	Array<double> B(b_data,4);

	D = A**C;
	D.print();

}
